{"version":3,"sources":["features/counter/counterSlice.ts","app/store.ts","components/App/App.tsx","serviceWorker.ts","index.tsx","components/App/App.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","urls","App","doorsRef","useRef","innerWidthRef","useState","room","setRoom","dir","setDir","useEffect","onResize","current","window","innerWidth","addEventListener","passive","removeEventListener","onClickPrev","useCallback","r","length","onClickNext","transitions","useTransition","p","enter","transform","leave","className","styles","app","ref","doors","map","item","props","key","url","li","door","style","title","src","hud","nav","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0OAYaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aANiC,CACjCC,MAAO,GAMPC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAGjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SC9Caa,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,gCCDPC,EAAiB,CACrB,+BACA,iBACA,6BACA,kDACA,iEAGWC,EAAU,WACrB,IAAMC,EAAWC,iBAAyB,MACpCC,EAAgBD,iBAAO,GAFF,EAIHE,mBAAS,GAJN,mBAIpBC,EAJoB,KAIdC,EAJc,OAKLF,mBAA0B,QALrB,mBAKpBG,EALoB,KAKfC,EALe,KAO3BC,qBAAU,WACR,IAAMC,EAAW,WACfP,EAAcQ,QAAUC,OAAOC,YAKjC,OAHAH,IAEAE,OAAOE,iBAAiB,SAAUJ,EAAU,CAAEK,SAAS,IAChD,WACLH,OAAOI,oBAAoB,SAAUN,MAEtC,IAEH,IAAMO,EAAcC,uBAAY,WAC9BZ,GAAQ,SAACa,GAAD,OAAQA,EAAIpB,EAAKqB,OAAS,GAAKrB,EAAKqB,UAC5CZ,EAAO,UACN,IAEGa,EAAcH,uBAAY,WAC9BZ,GAAQ,SAACa,GAAD,OAAQA,EAAI,GAAKpB,EAAKqB,UAC9BZ,EAAO,UACN,IAEGc,EAAcC,YAAclB,GAAM,SAACmB,GAAD,OAAOA,IAAG,CAChDC,MAAO,CAAEC,UAAW,yBACpBC,MAAO,CACLD,UAAU,eAAD,OAAyB,SAARnB,GAAkB,IAAM,IAAzC,eAIb,OACE,yBAAKqB,UAAWC,IAAOC,KACrB,wBAAIC,IAAK9B,EAAU2B,UAAWC,IAAOG,OAClCV,EAAYW,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACzBC,EAAMtC,EAAKmC,GAEjB,OACE,kBAAC,IAASI,GAAV,CAAaF,IAAKA,EAAKR,UAAWC,IAAOU,KAAMC,MAAOL,GACpD,4BAAQP,UAAWC,IAAOxB,KAAMoC,MAAOJ,EAAKK,IAAKL,SAKzD,4BAAQT,UAAWC,IAAOc,KACxB,4BAAQf,UAAWC,IAAOe,IAAKC,QAAS5B,GAAxC,iBAGA,4BAAQW,UAAWC,IAAOe,IAAKC,QAASxB,GAAxC,gBCtDYyB,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU1D,MAAOA,GACf,kBAAC,EAAD,QAGJ2D,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBE7I5BC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,KAAO,kBAAkB,KAAO,kBAAkB,IAAM,iBAAiB,IAAM,oB","file":"static/js/main.afc6d3d2.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React, { FC, useEffect, useRef, useState, useCallback } from 'react';\r\nimport { animated, useTransition } from 'react-spring';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst urls: string[] = [\r\n  'https://theweeklyweekly.com/',\r\n  'https://s4y.us',\r\n  'https://mysterycommand.com',\r\n  'https://webglsamples.org/aquarium/aquarium.html',\r\n  'https://bl.ocks.org/s4y/raw/89483ebe78e54fd1c6bd9a5d30a179a5/',\r\n];\r\n\r\nexport const App: FC = () => {\r\n  const doorsRef = useRef<HTMLOListElement>(null);\r\n  const innerWidthRef = useRef(0);\r\n\r\n  const [room, setRoom] = useState(0);\r\n  const [dir, setDir] = useState<'next' | 'prev'>('next');\r\n\r\n  useEffect(() => {\r\n    const onResize = () => {\r\n      innerWidthRef.current = window.innerWidth;\r\n    };\r\n    onResize();\r\n\r\n    window.addEventListener('resize', onResize, { passive: true });\r\n    return () => {\r\n      window.removeEventListener('resize', onResize);\r\n    };\r\n  }, []);\r\n\r\n  const onClickPrev = useCallback(() => {\r\n    setRoom((r) => (r + urls.length - 1) % urls.length);\r\n    setDir('prev');\r\n  }, []);\r\n\r\n  const onClickNext = useCallback(() => {\r\n    setRoom((r) => (r + 1) % urls.length);\r\n    setDir('next');\r\n  }, []);\r\n\r\n  const transitions = useTransition(room, (p) => p, {\r\n    enter: { transform: 'translate3d(0%, 0, 0)' },\r\n    leave: {\r\n      transform: `translate3d(${dir === 'next' ? -100 : 100}%, 0, 0)`,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className={styles.app}>\r\n      <ol ref={doorsRef} className={styles.doors}>\r\n        {transitions.map(({ item, props, key }) => {\r\n          const url = urls[item];\r\n\r\n          return (\r\n            <animated.li key={key} className={styles.door} style={props}>\r\n              <iframe className={styles.room} title={url} src={url} />\r\n            </animated.li>\r\n          );\r\n        })}\r\n      </ol>\r\n      <footer className={styles.hud}>\r\n        <button className={styles.nav} onClick={onClickPrev}>\r\n          previous room\r\n        </button>\r\n        <button className={styles.nav} onClick={onClickNext}>\r\n          next room\r\n        </button>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './app/store';\r\nimport { App } from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\",\"doors\":\"App_doors__2PrWW\",\"door\":\"App_door__1FJM9\",\"room\":\"App_room__1cq91\",\"hud\":\"App_hud__247Zm\",\"nav\":\"App_nav__4ERed\"};"],"sourceRoot":""}